# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: CICD NeMo Curator
on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - ray-api
      - "pull-request/[0-9]+"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event.label.name || 'main' }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      is_ci_workload: ${{ steps.is_ci_workload.outputs.main }}
      no_fail_fast: ${{ steps.no_fail_fast.outputs.main }}
      docs_only: ${{ steps.docs_only.outputs.main == 'true' }}
    env:
      TESTS_TO_RUN: ${{ inputs.test_to_run }}
      EVENT_NAME: ${{ github.event_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR info
        id: get-pr-info
        if: startsWith(github.ref, 'refs/heads/pull-request/')
        uses: nv-gha-runners/get-pr-info@main

      - name: Determine base reference
        id: base-ref
        run: |
          echo "base=${{ (startsWith(github.ref, 'refs/heads/pull-request/') && fromJSON(steps.get-pr-info.outputs.pr-info).base.ref) || 'HEAD~1' }}" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        uses: step-security/changed-files@v45.0.1
        with:
          files: |
            ray-curator/**
            nemo_curator/**
            .github/**
            pyproject.toml
            Dockerfile
            tests/**
          base_sha: ${{ steps.base-ref.outputs.base }}

      - name: Check if docs only
        shell: bash
        id: docs_only
        env:
          DOCS_ONLY: ${{ steps.changed-files.outputs.any_changed == 'false' }}
        run: |
          echo "main=$DOCS_ONLY" | tee -a "$GITHUB_OUTPUT"

      - name: Check if this is a CI workload
        shell: bash
        id: is_ci_workload
        run: |
          branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

          if [[ "$branch_name" =~ ^bump-ci-container || "$EVENT_NAME" == "schedule" ]]; then
            is_ci_workload=true
            echo "main=true" | tee -a "$GITHUB_OUTPUT"
          else
            is_ci_workload=false
          fi

          echo "main=$is_ci_workload" | tee -a "$GITHUB_OUTPUT"

      - name: Check if no-fail-fast is set
        shell: bash
        id: no_fail_fast
        env:
          HAS_FAIL_FAST_LABEL: ${{ contains(github.event.pull_request.labels.*.name, 'no-fail-fast') }}
        run: |
          if [[ "$HAS_FAIL_FAST_LABEL" == "true" || "$EVENT_NAME" == "schedule" ]]; then
            no_fail_fast=true
          else
            no_fail_fast=false
          fi

          echo "main=$no_fail_fast" | tee -a "$GITHUB_OUTPUT"

  cicd-wait-in-queue:
    needs: [pre-flight]
    runs-on: ubuntu-latest
    environment: test
    if: |
      needs.pre-flight.outputs.test_to_run != '[]'
      && needs.pre-flight.outputs.is_ci_workload == 'false'
      && needs.pre-flight.outputs.docs_only == 'false'
    steps:
      - name: Running CI tests
        run: |
          echo "Running CI tests"

  cicd-cpu-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.12"]
    needs: [pre-flight, cicd-wait-in-queue]
    runs-on: ${{ matrix.os }}
    name: L0_Unit_Test_CPU_python-${{ matrix.python-version }}
    environment: nemo-ci
    if: |
      (
        success()
        || needs.pre-flight.outputs.is_ci_workload == 'true'
        || needs.pre-flight.outputs.force_run_all == 'true'
      )
      && !cancelled()
    steps:
      - uses: actions/checkout@v4
      - name: Optionally free up space on Ubuntu
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install NeMo-Curator and pytest
        run: |
          pip install -U pip
          cd ray-curator
          pip install --no-cache-dir ".[dev]"
          pip install --no-cache-dir ".[text]"
          pip install --no-cache-dir pytest-asyncio coverage

      - name: Run tests
        run: |
          cd ray-curator
          python -m coverage run --branch --source=ray_curator -m pytest -v
